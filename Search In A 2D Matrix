DAY 2

Problem statement
You have been given a 2-D array 'mat' of size 'M x N' where 'M' and 'N' denote the number of rows and columns, respectively. 
The elements of each row are sorted in non-decreasing order.
Moreover, the first element of a row is greater than the last element of the previous row (if it exists).
You are given an integer ‘target’, and your task is to find if it exists in the given 'mat' or not.

Example:
Input: ‘M’ = 3, 'N' = 4, ‘mat’ = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], ‘target’ = 8
Output: true

Explanation: The output should be true as '8' exists in the matrix.


// Java solution

import java.util.ArrayList;
public class Solution {
    static boolean searchMatrix(ArrayList<ArrayList<Integer>> mat, int target) {
        // Write your code here.
        for(ArrayList<Integer> row : mat) {
            if(row.contains(target)) {
                return true;
            }
        }
        return false;
    }
  public static void main(String[] args) {
    ArrayList<ArrayList<Integer>> mat = new ArrayList<>();
    mat.add(1,2,3);
    mat.add(4,5,6);
    mat.add(7,8,9);
    int target=9;
    searchMatrix(mat,target);
}
}

My approach:

Simply iterating through each row of the 2d matrix and using contains method to check whether the target is present in that row. If yes, it will return true or else it will return false.
